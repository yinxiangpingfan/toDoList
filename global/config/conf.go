package config

import (
	"toDoList/global/logger"

	"github.com/spf13/viper"
)

var Conf = AutoGenerated{}

type AutoGenerated struct {
	RabbitMq RabbitMq `mapstructure:"rabbitMq"`
	Service  Service  `mapstructure:"service"`
	Mysql    Mysql    `mapstructure:"mysql"`
	Redis    Redis    `mapstructure:"redis"`
	Jwt      Jwt      `mapstructure:"jwt"`
}

type Jwt struct {
	Secret string `mapstructure:"secret"`
	Expire int    `mapstructure:"expire"`
}

type RabbitMq struct {
	Port     int    `mapstructure:"port"`
	User     string `mapstructure:"user"`
	Password string `mapstructure:"password"`
	Protocol string `mapstructure:"protocol"`
	Host     string `mapstructure:"host"`
}

type Service struct {
	TaskGrpcPort int    `mapstructure:"task_grpc_port"`
	HttpHost     string `mapstructure:"http_host"`
	HttpPort     int    `mapstructure:"http_port"`
	EtcdHost     string `mapstructure:"etcd_host"`
	EtcdPort     int    `mapstructure:"etcd_port"`
	UserGrpcHost string `mapstructure:"user_grpc_host"`
	UserGrpcPort int    `mapstructure:"user_grpc_port"`
	TaskGrpcHost string `mapstructure:"task_grpc_host"`
}

type Mysql struct {
	User     string `mapstructure:"user"`
	Password string `mapstructure:"password"`
	Database string `mapstructure:"database"`
	Host     string `mapstructure:"host"`
	Port     int    `mapstructure:"port"`
}

type Redis struct {
	Db       int    `mapstructure:"db"`
	Host     string `mapstructure:"host"`
	Port     int    `mapstructure:"port"`
	Password string `mapstructure:"password"`
}

func ConfInit() {
	viper.SetConfigName("config")
	viper.SetConfigType("yaml")
	viper.AddConfigPath(".")
	err := viper.ReadInConfig()
	if err != nil {
		logger.Logger.DPanicf("配置文件加载错误")
	}
	viper.Unmarshal(&Conf)
}
