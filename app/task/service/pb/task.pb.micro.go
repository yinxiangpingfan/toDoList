// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: task.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TaskService service

type TaskService interface {
	AddTask(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	DeleteTask(ctx context.Context, in *DelRequest, opts ...client.CallOption) (*DelResponse, error)
	UpdateTask(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	GetAllTasks(ctx context.Context, in *GetAllRequest, opts ...client.CallOption) (*GetAllResponse, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) AddTask(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.AddTask", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) DeleteTask(ctx context.Context, in *DelRequest, opts ...client.CallOption) (*DelResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.DeleteTask", in)
	out := new(DelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateTask(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateTask", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetAllTasks(ctx context.Context, in *GetAllRequest, opts ...client.CallOption) (*GetAllResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetAllTasks", in)
	out := new(GetAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceHandler interface {
	AddTask(context.Context, *AddRequest, *AddResponse) error
	DeleteTask(context.Context, *DelRequest, *DelResponse) error
	UpdateTask(context.Context, *UpdateRequest, *UpdateResponse) error
	GetAllTasks(context.Context, *GetAllRequest, *GetAllResponse) error
}

func RegisterTaskServiceHandler(s server.Server, hdlr TaskServiceHandler, opts ...server.HandlerOption) error {
	type taskService interface {
		AddTask(ctx context.Context, in *AddRequest, out *AddResponse) error
		DeleteTask(ctx context.Context, in *DelRequest, out *DelResponse) error
		UpdateTask(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		GetAllTasks(ctx context.Context, in *GetAllRequest, out *GetAllResponse) error
	}
	type TaskService struct {
		taskService
	}
	h := &taskServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskService{h}, opts...))
}

type taskServiceHandler struct {
	TaskServiceHandler
}

func (h *taskServiceHandler) AddTask(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.TaskServiceHandler.AddTask(ctx, in, out)
}

func (h *taskServiceHandler) DeleteTask(ctx context.Context, in *DelRequest, out *DelResponse) error {
	return h.TaskServiceHandler.DeleteTask(ctx, in, out)
}

func (h *taskServiceHandler) UpdateTask(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.TaskServiceHandler.UpdateTask(ctx, in, out)
}

func (h *taskServiceHandler) GetAllTasks(ctx context.Context, in *GetAllRequest, out *GetAllResponse) error {
	return h.TaskServiceHandler.GetAllTasks(ctx, in, out)
}
